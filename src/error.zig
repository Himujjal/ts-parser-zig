const std = @import("std");
const token = @import("token.zig");

const Token = token.Token;
const TokenType = token.TokenType;

pub const ParserErrorType = union(enum) {
    TokenizerError, // only for dev purposes
    MissingSemiColon,
    EOFError,
    UnexpectedError: Token,
    ExpectedFound: struct { expected: []const u8, found: []const u8 },

    AsyncFunctionInSingleStatementContext,
    BadImportCallArity,
    BadGetterArity,
    BadSetterArity,
    BadSetterRestParameter,
    CannotUseImportMetaOutsideAModule,
    ConstructorIsAsync,
    ConstructorSpecialMethod,
    DeclarationMissingInitializer,
    DefaultRestParameter,
    DefaultRestProperty,
    DuplicateBinding,
    DuplicateConstructor,
    DuplicateParameter,
    DuplicateProtoProperty,
    ForInOfLoopInitializer,
    GeneratorInLegacyContext,
    IllegalBreak,
    IllegalContinue,
    IllegalExportDeclaration,
    IllegalImportDeclaration,
    IllegalLanguageModeDirective,
    IllegalReturn,
    InvalidEscapedReservedWord,
    InvalidHexEscapeSequence,
    InvalidLHSInAssignment,
    InvalidLHSInForIn,
    InvalidLHSInForLoop,
    InvalidModuleSpecifier,
    InvalidRegExp,
    InvalidTaggedTemplateOnOptionalChain,
    InvalidUnicodeEscapeSequence,
    LetInLexicalBinding,
    MissingFromClause,
    MultipleDefaultsInSwitch,
    NewlineAfterThrow,
    NoAsAfterImportNamespace,
    NoCatchOrFinally,
    ParameterAfterRestParameter,
    PropertyAfterRestProperty,
    Redeclaration,
    StaticPrototype,
    StrictCatchVariable,
    StrictDelete,
    StrictFunction,
    StrictFunctionName,
    StrictLHSAssignment,
    StrictLHSPostfix,
    StrictLHSPrefix,
    StrictModeWith,
    StrictOctalLiteral,
    StrictParamName,
    StrictReservedWord,
    StrictVarName,
    TemplateOctalLiteral,
    TemplateEscape89,
    UnexpectedEOS,
    UnexpectedIdentifier,
    UnexpectedNumber,
    UnexpectedReserved,
    UnexpectedString,
    UnexpectedSuper,
    UnexpectedTemplate,
    UnexpectedToken,
    UnexpectedTokenIllegal,
    UnknownLabel,
    UnterminatedRegExp,
    LexicalDeclMustBeConstLet,

    /// This is a default Value for the ParserErrorType
    NoError,
};

pub const ParserError = struct {
    line: usize,
    col: usize,
    start: usize,
    end: usize,
    error_type: ParserErrorType,
	message: ?[]const u8 = null,
};
